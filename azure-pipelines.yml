trigger:
- main  # 自动触发 main 分支的代码变动

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure 容器注册表名称（不包含 .azurecr.io 后缀）
  ACR_NAME: "<your-acr-name>"
  # 镜像标签，使用唯一构建 ID
  IMAGE_TAG: "v$(Build.BuildId)"
  # Kubernetes 命名空间
  K8S_NAMESPACE: "default"

stages:
- stage: BuildAndPush
  displayName: "Build and Push Docker Images"
  jobs:
  - job: Build
    displayName: "Build and Push Docker Images to ACR"
    steps:
    # 1. 检出代码
    - task: Checkout@1
      displayName: "Checkout code"

    # 2. 登录到 ACR
    - task: AzureCLI@2
      displayName: "Log in to Azure Container Registry"
      inputs:
        azureSubscription: "<your-service-connection-name>"  # 替换为 ACR 的服务连接名称
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(ACR_NAME)

    # 3. 构建并推送前端镜像
    - task: Docker@2
      displayName: "Build and Push Frontend Docker Image"
      inputs:
        containerRegistry: "<your-service-connection-name>"
        repository: "$(ACR_NAME).azurecr.io/frontend"
        command: "buildAndPush"
        Dockerfile: "frontend/Dockerfile"  # 前端 Dockerfile 路径
        tags: "$(IMAGE_TAG)"

    # 4. 构建并推送后端镜像
    - task: Docker@2
      displayName: "Build and Push Backend Docker Image"
      inputs:
        containerRegistry: "<your-service-connection-name>"
        repository: "$(ACR_NAME).azurecr.io/backend"
        command: "buildAndPush"
        Dockerfile: "backend/Dockerfile"  # 后端 Dockerfile 路径
        tags: "$(IMAGE_TAG)"

- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: BuildAndPush  # 确保部署阶段在镜像构建完成后执行
  jobs:
  - job: Deploy
    displayName: "Deploy Applications to AKS"
    steps:
    # 1. 登录到 AKS 集群
    - task: AzureCLI@2
      displayName: "Log in to AKS"
      inputs:
        azureSubscription: "<your-service-connection-name>"  # 替换为 AKS 的服务连接名称
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group <your-resource-group> --name <your-aks-cluster-name>

    # 2. 部署到 AKS
    - task: KubernetesManifest@0
      displayName: "Deploy to AKS"
      inputs:
        kubernetesServiceConnection: "<your-aks-service-connection>"
        namespace: $(K8S_NAMESPACE)
        manifests: |
          manifests/frontend-deployment.yaml
          manifests/backend-deployment.yaml
        containers: |
          frontend:$(ACR_NAME).azurecr.io/frontend:$(IMAGE_TAG)
          backend:$(ACR_NAME).azurecr.io/backend:$(IMAGE_TAG)
